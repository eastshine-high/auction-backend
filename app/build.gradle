plugins {
    // Java
    id 'application'

    // Spring
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    // Asciidoctor
    id 'org.asciidoctor.jvm.convert' version '3.3.0'

    //querydsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

application {
    // Define the main class for the application.
    mainClass = 'com.eastshine.auction.App'
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testRuntimeOnly 'com.h2database:h2'

    //devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // RestDocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // google guava
    implementation 'com.google.guava:guava:30.1-jre'

    // MapStruct
    implementation (
            'org.mapstruct:mapstruct:1.4.2.Final',
            'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    )
    annotationProcessor (
            'org.mapstruct:mapstruct-processor:1.4.2.Final',
            'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    )
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    // Lombok
    implementation 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // Spring Developer Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Spring Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // For Json patch
    implementation 'org.apache.johnzon:johnzon-core'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr353'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa'

    // Spring Data Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Embedded Redis
    implementation 'it.ozimov:embedded-redis:0.7.2'
    // Redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.17.7'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:kafka:1.17.5'

    // RDB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.7.5'

    // Flyway
    implementation 'org.flywaydb:flyway-core'

    // Query parameter log
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor{
    dependsOn(test)

    onlyIf {
        file(snippetsDir).exists()
    }

    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    sourceDir 'src/main/docs/asciidoc'
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
compileQuerydsl.doFirst {
    if (file(querydslDir).exists()) delete(file(querydslDir))
}
